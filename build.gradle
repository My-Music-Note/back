plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

jacoco {
	toolVersion = "0.8.9"
}




sonar {
	properties {
		property "sonar.projectKey", "My-Music-Note_back"
		property "sonar.organization", "my-music-note"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
	}
}

group = 'my.music.note'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql:42.7.2'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'software.amazon.awssdk:kms:2.20.25'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.0")
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'
	implementation 'com.auth0:java-jwt:4.4.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test  // 테스트가 실행된 후에 리포트 생성
	reports {
		xml.required = true
	}
}

tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}